
D29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ad  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000737  00000000  00000000  00000dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000533  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c5  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  00002105  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  8a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <A_Timer0_Excution>:
{
	
}
void A_Timer0_Excution(void)
{
  SetBit(DDRC,7);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	80 68       	ori	r24, 0x80	; 128
  96:	84 bb       	out	0x14, r24	; 20
 SetBit(PORTC,7);	
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	08 95       	ret

000000a0 <main>:
void A_Timer0_Excution(void);
/***********************************************************************************************/
int main(void)
{
	
	M_Timer0_Init();
  a0:	0e 94 89 00 	call	0x112	; 0x112 <M_Timer0_Init>
	M_Timer0_SetTime(1000);
  a4:	68 ee       	ldi	r22, 0xE8	; 232
  a6:	73 e0       	ldi	r23, 0x03	; 3
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 96 00 	call	0x12c	; 0x12c <M_Timer0_SetTime>
	M_Timer0_Start();
  b0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <M_Timer0_Start>
	while(1)
	 {	
		 M_Timer0_SetCallBack(A_Timer0_Excution);
  b4:	89 e4       	ldi	r24, 0x49	; 73
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 df 00 	call	0x1be	; 0x1be <M_Timer0_SetCallBack>
		 ClrBit(PORTC,7);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	f8 cf       	rjmp	.-16     	; 0xb4 <main+0x14>

000000c4 <__vector_1>:
void M_Ext_SetCallBack(void (*Ptr)(void) )
{
  CallBack=Ptr	; 
}
ISR(INT0_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	CallBack();
  e6:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <CallBack>
  ea:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <CallBack+0x1>
  ee:	09 95       	icall
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <M_Timer0_Init>:
{
    M_Timer0_Start();	
}
void M_Timer0_Pwm0Stop(void)
{
	M_Timer0_Stop();
 112:	83 b7       	in	r24, 0x33	; 51
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	83 bf       	out	0x33, r24	; 51
 118:	83 b7       	in	r24, 0x33	; 51
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	83 bf       	out	0x33, r24	; 51
 11e:	89 b7       	in	r24, 0x39	; 57
 120:	81 60       	ori	r24, 0x01	; 1
 122:	89 bf       	out	0x39, r24	; 57
 124:	8f b7       	in	r24, 0x3f	; 63
 126:	80 68       	ori	r24, 0x80	; 128
 128:	8f bf       	out	0x3f, r24	; 63
 12a:	08 95       	ret

0000012c <M_Timer0_SetTime>:
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	9b 01       	movw	r18, r22
 132:	ac 01       	movw	r20, r24
 134:	a8 ee       	ldi	r26, 0xE8	; 232
 136:	b3 e0       	ldi	r27, 0x03	; 3
 138:	0e 94 46 01 	call	0x28c	; 0x28c <__muluhisi3>
 13c:	8b 01       	movw	r16, r22
 13e:	9c 01       	movw	r18, r24
 140:	68 94       	set
 142:	15 f8       	bld	r1, 5
 144:	36 95       	lsr	r19
 146:	27 95       	ror	r18
 148:	17 95       	ror	r17
 14a:	07 95       	ror	r16
 14c:	16 94       	lsr	r1
 14e:	d1 f7       	brne	.-12     	; 0x144 <M_Timer0_SetTime+0x18>
 150:	dc 01       	movw	r26, r24
 152:	cb 01       	movw	r24, r22
 154:	07 2e       	mov	r0, r23
 156:	7e e0       	ldi	r23, 0x0E	; 14
 158:	b6 95       	lsr	r27
 15a:	a7 95       	ror	r26
 15c:	97 95       	ror	r25
 15e:	87 95       	ror	r24
 160:	7a 95       	dec	r23
 162:	d1 f7       	brne	.-12     	; 0x158 <M_Timer0_SetTime+0x2c>
 164:	70 2d       	mov	r23, r0
 166:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Timer0_u32_NumOfOverFlow>
 16a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Timer0_u32_NumOfOverFlow+0x1>
 16e:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <Timer0_u32_NumOfOverFlow+0x2>
 172:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <Timer0_u32_NumOfOverFlow+0x3>
 176:	00 23       	and	r16, r16
 178:	a9 f0       	breq	.+42     	; 0x1a4 <M_Timer0_SetTime+0x78>
 17a:	01 95       	neg	r16
 17c:	02 bf       	out	0x32, r16	; 50
 17e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Timer0_u32_NumOfOverFlow>
 182:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Timer0_u32_NumOfOverFlow+0x1>
 186:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <Timer0_u32_NumOfOverFlow+0x2>
 18a:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <Timer0_u32_NumOfOverFlow+0x3>
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	a1 1d       	adc	r26, r1
 192:	b1 1d       	adc	r27, r1
 194:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Timer0_u32_NumOfOverFlow>
 198:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Timer0_u32_NumOfOverFlow+0x1>
 19c:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <Timer0_u32_NumOfOverFlow+0x2>
 1a0:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <Timer0_u32_NumOfOverFlow+0x3>
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <M_Timer0_Start>:
 1aa:	83 b7       	in	r24, 0x33	; 51
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	83 bf       	out	0x33, r24	; 51
 1b0:	83 b7       	in	r24, 0x33	; 51
 1b2:	8d 7f       	andi	r24, 0xFD	; 253
 1b4:	83 bf       	out	0x33, r24	; 51
 1b6:	83 b7       	in	r24, 0x33	; 51
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	83 bf       	out	0x33, r24	; 51
 1bc:	08 95       	ret

000001be <M_Timer0_SetCallBack>:
}

void M_Timer0_SetCallBack(void (*ptr)(void))
{
	CallBack=ptr;
 1be:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <CallBack+0x1>
 1c2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <CallBack>
 1c6:	08 95       	ret

000001c8 <__vector_11>:
}
 #if Timer0_Mode == Normal_Mode
ISR(TIMER0_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	static u32 Local_u32_Counter=0;
	Local_u32_Counter++;
 1ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 1ee:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 1f2:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_end+0x2>
 1f6:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_end+0x3>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	a1 1d       	adc	r26, r1
 1fe:	b1 1d       	adc	r27, r1
 200:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
 204:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 208:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_end+0x2>
 20c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_end+0x3>
	if(Local_u32_Counter==Timer0_u32_NumOfOverFlow)
 210:	40 91 65 00 	lds	r20, 0x0065	; 0x800065 <Timer0_u32_NumOfOverFlow>
 214:	50 91 66 00 	lds	r21, 0x0066	; 0x800066 <Timer0_u32_NumOfOverFlow+0x1>
 218:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Timer0_u32_NumOfOverFlow+0x2>
 21c:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Timer0_u32_NumOfOverFlow+0x3>
 220:	84 17       	cp	r24, r20
 222:	95 07       	cpc	r25, r21
 224:	a6 07       	cpc	r26, r22
 226:	b7 07       	cpc	r27, r23
 228:	89 f4       	brne	.+34     	; 0x24c <__vector_11+0x84>
	{
		CallBack();
 22a:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <CallBack>
 22e:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <CallBack+0x1>
 232:	09 95       	icall
		Local_u32_Counter=0;
 234:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
 238:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
 23c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end+0x2>
 240:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x3>
		TCNT0 =256-Timer0_u8_RemTicks;
 244:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Timer0_u8_RemTicks>
 248:	81 95       	neg	r24
 24a:	82 bf       	out	0x32, r24	; 50
	}
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__umulhisi3>:
 26e:	a2 9f       	mul	r26, r18
 270:	b0 01       	movw	r22, r0
 272:	b3 9f       	mul	r27, r19
 274:	c0 01       	movw	r24, r0
 276:	a3 9f       	mul	r26, r19
 278:	70 0d       	add	r23, r0
 27a:	81 1d       	adc	r24, r1
 27c:	11 24       	eor	r1, r1
 27e:	91 1d       	adc	r25, r1
 280:	b2 9f       	mul	r27, r18
 282:	70 0d       	add	r23, r0
 284:	81 1d       	adc	r24, r1
 286:	11 24       	eor	r1, r1
 288:	91 1d       	adc	r25, r1
 28a:	08 95       	ret

0000028c <__muluhisi3>:
 28c:	0e 94 37 01 	call	0x26e	; 0x26e <__umulhisi3>
 290:	a5 9f       	mul	r26, r21
 292:	90 0d       	add	r25, r0
 294:	b4 9f       	mul	r27, r20
 296:	90 0d       	add	r25, r0
 298:	a4 9f       	mul	r26, r20
 29a:	80 0d       	add	r24, r0
 29c:	91 1d       	adc	r25, r1
 29e:	11 24       	eor	r1, r1
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
